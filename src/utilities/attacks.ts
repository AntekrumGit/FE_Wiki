// Броузер выступает полем, для прогона скриптов, которые он получает от сервера
// Разные вкладки - это разные скрипты (по политики безопасности браузер не дает общаться из одной вкладке к другой)
// Когда код открыт в одной вкладке и он посылает запросы, внутри есть поле ориджн, которое указывает на УРЛ с какого этот код был предоставлен и ранится
// Если ориджн не совпадает с оридженом сервера, значит этот реквест был послан не со скрипта, который отдал сервер, а например с другой вкладки
// Этот запрос будет заблокирован соответсвенно с CORS политикой безопасности браузера

//Cross-site request forgery (also known as CSRF)
//Атака осуществляется путём размещения на веб-странице ссылки или скрипта, пытающегося получить доступ к сайту, на котором атакуемый пользователь заведомо (или предположительно) уже аутентифицирован. Например, пользователь Алиса может просматривать форум, где другой пользователь, Боб, разместил сообщение. Пусть Боб создал тег <img>, в котором в качестве источника картинки указал URL, при переходе по которому выполняется действие на сайте банка Алисы, например:
// Боб: Привет, Алиса! Посмотри, какой милый котик: <img src="http://bank.example.com/?account=Alice&amount=1000000&for=Bob">
// Если банк Алисы хранит информацию об аутентификации Алисы в куки, и если куки ещё не истекли, при попытке загрузить картинку браузер Алисы отправит куки в запросе на перевод денег на счёт Боба, чем подтвердит аутентификацию Алисы. Таким образом, транзакция будет успешно завершена, хотя её подтверждение произойдет без ведома Алисы.
